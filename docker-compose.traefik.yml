version: '3'
services:
  db:
    image: postgres:9.6.6-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: pharos
      POSTGRES_DB: pharos
    volumes:
      - ./docker/pharos-postgres:/var/lib/postgresql/data
    networks:
      - internal
    labels:
      - traefik.enable=false
  pharos:
    image: aptrust/pharos
    command: bundle exec puma -p9292 -e ${RAILS_ENV}
    volumes:
      - .:/pharos
    depends_on:
      - db
      - migration
    environment:
      DOCKERIZED: 'true'
      RAILS_ENV: 'demo'
      PHAROS_DB_HOST: db
      PHAROS_DB_USER: 'pharos'
      PHAROS_DB_PWD: 'pharos'
      SECRET_KEY_BASE: '74455f96b7e2ed8c5a798d9d302eded8f82327de69ee094e479b73318dce4dcc62f5cccd7ac285fe9a39fdd9e7658b54e35971eb630bf8695e6c3d47da265412'
#    env_file:
#      - ".env"
    labels:
     - "traefik.backend=pharos"
     - "traefik.frontend.rule=Host:pharos2.docker1.aptrust.org"
     - "traefik.port=9292"
     - "traefik.docker.network=proxy"
     - "traefik.basic.protocol=http"
    networks:
      - internal
      - proxy
    ports:
     - "9292:9292"
  migration:
    image: aptrust/pharos
    # Note: Sleep 5 seconds before init db, so psql has time to start up.
    command: /bin/bash -c "sleep 15 && rake db:exists && rake db:migrate || (echo 'Init DB setup' && rake db:setup && rake pharos:setup)"
    environment:
      DOCKERIZED: 'true'
      RAILS_ENV: 'demo'
      PHAROS_DB_HOST: 'db'
      PHAROS_DB_USER: 'pharos'
    #    PHAROS_DB_PWD: 'password'
      SECRET_KEY_BASE: '74455f96b7e2ed8c5a798d9d302eded8f82327de69ee094e479b73318dce4dcc62f5cccd7ac285fe9a39fdd9e7658b54e35971eb630bf8695e6c3d47da265412'
    volumes:
      - .:/pharos
    depends_on:
      - db
    networks:
      - internal
    labels:
      - "traefik.enable=false"
  reverse-proxy:
    image: traefik # The official Traefik docker image
    command: --api --docker --logLevel="DEBUG" # Enables the web UI and tells Tr√¶fik to listen to docker
    ports:
      - "80:80"     # The HTTP port
      - "443:443"     # The HTTP port
      - "8080:8080" # The Web UI (enabled by --api)
    volumes:
      - ./docker/traefik/traefik.toml:/traefik.toml
      - /var/run/docker.sock:/var/run/docker.sock # So that Traefik can listen to the Docker events
      - ./docker/traefik/acme.json:/acme.json
    networks:
      - proxy
# https://stackoverflow.com/questions/51884667/how-to-serve-static-content-with-nginx-and-django-gunicorn-when-using-traefik/51887971
  nginx-assets:
    image: nginx:alpine
    command: [nginx-debug, '-g', 'daemon off;']
#    container_name: nginx_static_files
    restart: always
    volumes:
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./public:/etc/share/nginx/html/pharos
    networks:
    #    - internal
        - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.assets.backend=nginx-assets"
      - "traefik.assets.frontend.rule=Host:pharos2.docker1.aptrust.org;PathPrefix:/assets"
      - "traefik.docker.network=proxy"
#      - "traefik.protocol=https"
      - "traefik.port=80"
#      - "traefik.frontend.entryPoints=https"

networks:
  proxy:
    external: true
  internal:
    external: false
